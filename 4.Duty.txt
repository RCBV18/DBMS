Consider the following database:
Employee (emp_no, name, skill, pay rate)
Position (posting_no, skill)
Duty_allocation (posting_no, emp_no, day, shift(day/night))         
1. Get count of different employee of each shift
2. Count the number of employees
3. Calculate the total payrate of the company
4. Calculate the average payrate of the company for each employee.
5. Find out the minimum payrate and maximum payrate of a company using aggregation.
6. Write a PL/SQL cursor to fetch all employee names and their corresponding skills from the Employee table.





CREATE TABLE Employee (
  emp_no INT,
  name VARCHAR(50),
  skill VARCHAR(50),
  pay_rate DECIMAL(10,2)
);

CREATE TABLE Position (
  posting_no INT,
  skill VARCHAR(50)
);

CREATE TABLE Duty_allocation (
  posting_no INT,
  emp_no INT,
  day DATE,
  shift VARCHAR(10)
);



INSERT INTO Employee VALUES (1, 'Alice', 'Java', 500);
INSERT INTO Employee VALUES (2, 'Bob', 'Python', 600);
INSERT INTO Employee VALUES (3, 'Charlie', 'SQL', 550);

INSERT INTO Position VALUES (101, 'Java');
INSERT INTO Position VALUES (102, 'Python');

INSERT INTO Duty_allocation VALUES (101, 1, DATE '2025-05-01', 'day');
INSERT INTO Duty_allocation VALUES (101, 2, DATE '2025-05-01', 'night');
INSERT INTO Duty_allocation VALUES (102, 3, DATE '2025-05-01', 'day');




SELECT shift, COUNT(DISTINCT emp_no) FROM Duty_allocation GROUP BY shift;

SELECT COUNT(*) FROM Employee;

SELECT SUM(pay_rate) FROM Employee;

SELECT AVG(pay_rate) FROM Employee;

SELECT MIN(pay_rate), MAX(pay_rate) FROM Employee;



-- 6. pl/sql cursor to fetch employee names and skills
declare
    cursor emp_cursor is
        select name, skill from employee;
    v_name employee.name%type;
    v_skill employee.skill%type;
begin
    open emp_cursor;
    loop
        fetch emp_cursor into v_name, v_skill;
        exit when emp_cursor%notfound;
        dbms_output.put_line('Name: ' || v_name || ', Skill: ' || v_skill);
    end loop;
    close emp_cursor;
end;
